#!/usr/bin/env python3
"""
üéØ Android Sound Detector - Kivy Version
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –∑–≤—É–∫–æ–≤ –¥–ª—è Android —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
"""

from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.label import Label
from kivy.uix.button import Button
from kivy.uix.progressbar import ProgressBar
from kivy.clock import Clock
from kivy.core.audio import SoundLoader
from kivy.utils import platform
from kivy.properties import StringProperty, NumericProperty, BooleanProperty

import numpy as np
import json
import os
from datetime import datetime

# –£—Å–ª–æ–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
if platform == 'android':
    from android.permissions import request_permissions, Permission
    request_permissions([Permission.RECORD_AUDIO, Permission.WRITE_EXTERNAL_STORAGE])
    # –î–ª—è Android –∏—Å–ø–æ–ª—å–∑—É–µ–º PyAudio –∏–ª–∏ android.media
    try:
        from jnius import autoclass
        AudioRecord = autoclass('android.media.AudioRecord')
        AudioFormat = autoclass('android.media.AudioFormat')
        MediaRecorder = autoclass('android.media.MediaRecorder$AudioSource')
    except:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Android audio API")
else:
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –ü–ö
    try:
        import sounddevice as sd
    except:
        print("‚ö†Ô∏è sounddevice –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

try:
    import tensorflow as tf
    TENSORFLOW_AVAILABLE = True
except:
    print("‚ö†Ô∏è TensorFlow –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω - —Ä–∞–±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –¥–µ–º–æ")
    TENSORFLOW_AVAILABLE = False


class SoundDetectorWidget(BoxLayout):
    """–ì–ª–∞–≤–Ω—ã–π –≤–∏–¥–∂–µ—Ç –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –∑–≤—É–∫–æ–≤"""
    
    # –°–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
    status_text = StringProperty("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    confidence_value = NumericProperty(0.0)
    distance_value = NumericProperty(0.0)
    db_value = NumericProperty(0.0)
    sound_type = StringProperty("---")
    detection_count = NumericProperty(0)
    is_detecting = BooleanProperty(False)
    
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.orientation = 'vertical'
        self.padding = 20
        self.spacing = 15
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ç–µ–∫—Ü–∏–∏
        self.SAMPLE_RATE = 16000
        self.CHUNK_SIZE = int(self.SAMPLE_RATE * 0.975)
        self.CONFIDENCE_THRESHOLD = 0.6
        self.MIN_VOLUME = 0.002
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        self.load_calibration()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        self.model_loaded = False
        if TENSORFLOW_AVAILABLE:
            self.load_model()
        
        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ UI
        self.build_ui()
        
        # –°—á–µ—Ç—á–∏–∫–∏
        self.detection_count_value = 0
        self.frames_processed = 0
        
        # –ê—É–¥–∏–æ –±—É—Ñ–µ—Ä
        self.audio_buffer = []
        
    def load_calibration(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            calibration_file = 'distance_calibration.json'
            if os.path.exists(calibration_file):
                with open(calibration_file, 'r', encoding='utf-8') as f:
                    calibration = json.load(f)
                
                self.distance_table = []
                mapping = calibration['calibration_data']['distance_db_mapping']
                for distance_str, data in mapping.items():
                    distance = float(distance_str)
                    db = data['db']
                    self.distance_table.append((db, distance, data['description']))
                
                self.distance_table.sort(key=lambda x: x[0], reverse=True)
                print("‚úÖ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            else:
                self.create_default_calibration()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: {e}")
            self.create_default_calibration()
    
    def create_default_calibration(self):
        """–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        self.distance_table = [
            (70, 0.3, "–û—á–µ–Ω—å –±–ª–∏–∑–∫–æ"),
            (65, 0.5, "–ë–ª–∏–∑–∫–æ"),
            (60, 1.0, "–†—è–¥–æ–º"),
            (55, 1.5, "–ù–µ–¥–∞–ª–µ–∫–æ"),
            (50, 2.0, "–°—Ä–µ–¥–Ω–µ"),
            (45, 3.0, "–î–∞–ª–µ–∫–æ"),
            (40, 4.0, "–û—á–µ–Ω—å –¥–∞–ª–µ–∫–æ"),
        ]
        print("üìä –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    def load_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ AI –º–æ–¥–µ–ª–∏"""
        try:
            model_path = 'model/my_sound_model.h5'
            if os.path.exists(model_path):
                self.classifier = tf.keras.models.load_model(model_path, compile=False)
                self.model_loaded = True
                print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            else:
                print("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                self.model_loaded = False
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            self.model_loaded = False
    
    def build_ui(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = Label(
            text='üéµ –î–µ—Ç–µ–∫—Ç–æ—Ä –ó–≤—É–∫–æ–≤',
            size_hint=(1, 0.1),
            font_size='24sp',
            bold=True,
            color=(0.2, 0.6, 1, 1)
        )
        self.add_widget(title)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = Label(
            text=self.status_text,
            size_hint=(1, 0.08),
            font_size='16sp',
            color=(1, 1, 1, 1)
        )
        self.add_widget(self.status_label)
        self.bind(status_text=lambda instance, value: setattr(self.status_label, 'text', value))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        info_layout = BoxLayout(orientation='vertical', size_hint=(1, 0.35), spacing=10)
        
        # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        conf_box = BoxLayout(orientation='horizontal', size_hint=(1, 0.2))
        conf_box.add_widget(Label(text='–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:', size_hint=(0.4, 1), halign='left'))
        self.conf_label = Label(text='0%', size_hint=(0.3, 1), bold=True, color=(0, 1, 0, 1))
        conf_box.add_widget(self.conf_label)
        self.conf_bar = ProgressBar(max=100, size_hint=(0.3, 1))
        conf_box.add_widget(self.conf_bar)
        info_layout.add_widget(conf_box)
        
        # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        dist_box = BoxLayout(orientation='horizontal', size_hint=(1, 0.2))
        dist_box.add_widget(Label(text='–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:', size_hint=(0.4, 1), halign='left'))
        self.dist_label = Label(text='---', size_hint=(0.6, 1), bold=True, color=(1, 1, 0, 1))
        dist_box.add_widget(self.dist_label)
        info_layout.add_widget(dist_box)
        
        # –î–µ—Ü–∏–±–µ–ª—ã
        db_box = BoxLayout(orientation='horizontal', size_hint=(1, 0.2))
        db_box.add_widget(Label(text='–î–µ—Ü–∏–±–µ–ª—ã:', size_hint=(0.4, 1), halign='left'))
        self.db_label = Label(text='0 –¥–ë', size_hint=(0.6, 1), bold=True, color=(1, 0.5, 0, 1))
        db_box.add_widget(self.db_label)
        info_layout.add_widget(db_box)
        
        # –¢–∏–ø –∑–≤—É–∫–∞
        type_box = BoxLayout(orientation='horizontal', size_hint=(1, 0.2))
        type_box.add_widget(Label(text='–¢–∏–ø –∑–≤—É–∫–∞:', size_hint=(0.4, 1), halign='left'))
        self.type_label = Label(text='---', size_hint=(0.6, 1), bold=True, color=(1, 0, 1, 1))
        type_box.add_widget(self.type_label)
        info_layout.add_widget(type_box)
        
        # –°—á–µ—Ç—á–∏–∫ –¥–µ—Ç–µ–∫—Ü–∏–π
        count_box = BoxLayout(orientation='horizontal', size_hint=(1, 0.2))
        count_box.add_widget(Label(text='–î–µ—Ç–µ–∫—Ü–∏–π:', size_hint=(0.4, 1), halign='left'))
        self.count_label = Label(text='0', size_hint=(0.6, 1), bold=True, color=(0, 1, 1, 1))
        count_box.add_widget(self.count_label)
        info_layout.add_widget(count_box)
        
        self.add_widget(info_layout)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_layout = BoxLayout(orientation='horizontal', size_hint=(1, 0.15), spacing=10)
        
        self.start_button = Button(
            text='‚ñ∂ –°–¢–ê–†–¢',
            background_color=(0, 0.8, 0, 1),
            font_size='18sp',
            bold=True
        )
        self.start_button.bind(on_press=self.start_detection)
        button_layout.add_widget(self.start_button)
        
        self.stop_button = Button(
            text='‚è∏ –°–¢–û–ü',
            background_color=(0.8, 0, 0, 1),
            font_size='18sp',
            bold=True,
            disabled=True
        )
        self.stop_button.bind(on_press=self.stop_detection)
        button_layout.add_widget(self.stop_button)
        
        self.add_widget(button_layout)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–Ω–∏–∑—É
        info_text = Label(
            text=f'AI –º–æ–¥–µ–ª—å: {"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞" if self.model_loaded else "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞"}\n–†–µ–∂–∏–º: {"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π" if TENSORFLOW_AVAILABLE else "–î–µ–º–æ"}',
            size_hint=(1, 0.1),
            font_size='12sp',
            color=(0.7, 0.7, 0.7, 1)
        )
        self.add_widget(info_text)
    
    def start_detection(self, instance):
        """–ó–∞–ø—É—Å–∫ –¥–µ—Ç–µ–∫—Ü–∏–∏"""
        self.is_detecting = True
        self.start_button.disabled = True
        self.stop_button.disabled = False
        self.status_text = "üîä –î–µ—Ç–µ–∫—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞..."
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∞—É–¥–∏–æ
        self.detection_event = Clock.schedule_interval(self.process_audio, 1.0)
        
        print("‚ñ∂ –î–µ—Ç–µ–∫—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞")
    
    def stop_detection(self, instance):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏"""
        self.is_detecting = False
        self.start_button.disabled = False
        self.stop_button.disabled = True
        self.status_text = "‚è∏ –î–µ—Ç–µ–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        if hasattr(self, 'detection_event'):
            self.detection_event.cancel()
        
        print("‚è∏ –î–µ—Ç–µ–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def process_audio(self, dt):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö"""
        if not self.is_detecting:
            return
        
        # –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç)
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞—Ö–≤–∞—Ç —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
        
        # DEMO: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        if not self.model_loaded:
            self.simulate_detection()
        else:
            # –†–µ–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ
            self.real_audio_processing()
    
    def simulate_detection(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –¥–ª—è –¥–µ–º–æ —Ä–µ–∂–∏–º–∞"""
        import random
        
        # –°–ª—É—á–∞–π–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 20%
        if random.random() < 0.2:
            self.detection_count_value += 1
            
            confidence = random.uniform(0.6, 1.0)
            db_level = random.uniform(50, 75)
            distance = self.interpolate_distance(db_level)[0]
            sound_types = ["—Ä–µ—á—å/–≥–æ–ª–æ—Å", "—É–¥–∞—Ä/—Å—Ç—É–∫", "–º—É–∑—ã–∫–∞", "—Ä–µ–∑–∫–∏–π –∑–≤—É–∫"]
            sound_type = random.choice(sound_types)
            
            self.update_ui(confidence, db_level, distance, sound_type)
    
    def real_audio_processing(self):
        """–†–µ–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Å –º–æ–¥–µ–ª—å—é"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞—Ö–≤–∞—Ç –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å
        # –î–ª—è Android –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ AudioRecord API
        # –î–ª—è –ü–ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ sounddevice
        pass
    
    def interpolate_distance(self, db_level):
        """–ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –ø–æ –¥–µ—Ü–∏–±–µ–ª–∞–º"""
        for i, (table_db, table_dist, desc) in enumerate(self.distance_table):
            if db_level >= table_db:
                if i == 0:
                    return table_dist, desc
                
                prev_db, prev_dist, prev_desc = self.distance_table[i-1]
                ratio = (db_level - table_db) / (prev_db - table_db)
                distance = table_dist + ratio * (prev_dist - table_dist)
                return distance, desc
        
        return self.distance_table[-1][1], self.distance_table[-1][2]
    
    def format_distance(self, distance):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è"""
        if distance < 1.0:
            return f"{distance*100:.0f}—Å–º"
        elif distance < 10.0:
            return f"{distance:.1f}–º"
        else:
            return f"{distance:.0f}–º"
    
    def update_ui(self, confidence, db_level, distance, sound_type):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞
        self.confidence_value = confidence * 100
        self.db_value = db_level
        self.distance_value = distance
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–µ–π–±–ª—ã
        self.conf_label.text = f"{confidence*100:.1f}%"
        self.conf_bar.value = confidence * 100
        
        self.db_label.text = f"{db_level:.1f} –¥–ë"
        self.dist_label.text = self.format_distance(distance)
        self.type_label.text = sound_type
        self.count_label.text = str(self.detection_count_value)
        
        # –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if confidence > 0.8:
            self.conf_label.color = (0, 1, 0, 1)  # –ó–µ–ª–µ–Ω—ã–π
        elif confidence > 0.6:
            self.conf_label.color = (1, 1, 0, 1)  # –ñ–µ–ª—Ç—ã–π
        else:
            self.conf_label.color = (1, 0.5, 0, 1)  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
        
        self.status_text = f"üü¢ –ó–í–£–ö –û–ë–ù–ê–†–£–ñ–ï–ù #{self.detection_count_value}"


class SoundDetectorApp(App):
    """–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    
    def build(self):
        self.title = 'Sound Detector'
        return SoundDetectorWidget()
    
    def on_start(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print("üéµ Sound Detector –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è Android
        if platform == 'android':
            print("üì± –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π Android...")
    
    def on_stop(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print("üëã Sound Detector –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == '__main__':
    SoundDetectorApp().run()
