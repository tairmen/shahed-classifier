"""
üöÄ –ë–´–°–¢–†–´–ô –°–¢–ê–†–¢ - Google Colab —Å–±–æ—Ä–∫–∞ APK
–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –Ω–æ–≤—ã–π Colab notebook
"""

# ============================================
# üì± –°–±–æ—Ä–∫–∞ Android APK - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
# ============================================

print("=" * 60)
print("üéØ Android Sound Detector - APK Builder")
print("=" * 60)

# –®–∞–≥ 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Buildozer
print("\n[1/6] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ buildozer...")
get_ipython().system('pip install -q buildozer cython==0.29.33')

# –®–∞–≥ 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Android –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
print("\n[2/6] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Android SDK/NDK –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
get_ipython().system('apt-get update -qq')
get_ipython().system('apt-get install -y -qq openjdk-17-jdk autoconf libtool')

# –®–∞–≥ 3: –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
print("\n[3/6] –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...")
print("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥:")
print("  A) –ò–∑ GitHub (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)")
print("  B) –ó–∞–≥—Ä—É–∑–∏—Ç—å ZIP –≤—Ä—É—á–Ω—É—é")

# –í–ê–†–ò–ê–ù–¢ A: –ò–∑ GitHub
get_ipython().system('git clone https://github.com/tairmen/shahed-classifier.git')
get_ipython().run_line_magic('cd', 'shahed-classifier')

# –í–ê–†–ò–ê–ù–¢ B: –†—É—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
# from google.colab import files
# print("–ó–∞–≥—Ä—É–∑–∏—Ç–µ sound_classifier_android_fixed.zip:")
# uploaded = files.upload()
# !unzip -q sound_classifier_android_fixed.zip
# %cd sound_classifier

# –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
print("\n[4/6] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤...")
import os
required = ['android_sound_detector.py', 'buildozer.spec', 'model/my_sound_model.tflite']
for f in required:
    if os.path.exists(f):
        print(f"  ‚úÖ {f}")
    else:
        print(f"  ‚ùå {f} - –ù–ï –ù–ê–ô–î–ï–ù!")

# –®–∞–≥ 5: –°–±–æ—Ä–∫–∞ APK
print("\n[5/6] –°–±–æ—Ä–∫–∞ APK (—ç—Ç–æ –∑–∞–π–º–µ—Ç 20-30 –º–∏–Ω—É—Ç)...")
print("=" * 60)
print("‚òï –í—Ä–µ–º—è –≤—ã–ø–∏—Ç—å –∫–æ—Ñ–µ!")
print("=" * 60)
get_ipython().system('buildozer -v android debug')

# –®–∞–≥ 6: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ APK
print("\n[6/6] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ APK...")
print("=" * 60)

from google.colab import files
import os

if os.path.exists('bin'):
    apk_files = [f for f in os.listdir('bin/') if f.endswith('.apk')]
    
    if apk_files:
        apk_path = f'bin/{apk_files[0]}'
        size_mb = os.path.getsize(apk_path) / (1024 * 1024)
        
        print(f"‚úÖ APK –£–°–ü–ï–®–ù–û –°–û–ë–†–ê–ù!")
        print(f"üì¶ –§–∞–π–ª: {apk_files[0]}")
        print(f"üìä –†–∞–∑–º–µ—Ä: {size_mb:.2f} MB")
        print(f"üì± –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è Android: 5.0 (API 21)")
        print(f"üéØ –¶–µ–ª–µ–≤–∞—è –≤–µ—Ä—Å–∏—è Android: 13 (API 33)")
        print("\n‚¨áÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
        print("=" * 60)
        
        files.download(apk_path)
        
        print("\n" + "=" * 60)
        print("üéâ –ì–û–¢–û–í–û!")
        print("=" * 60)
        print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ APK –Ω–∞ Android —Ç–µ–ª–µ—Ñ–æ–Ω")
        print("2. –í–∫–ª—é—á–∏—Ç–µ '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏' –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        print("3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ APK")
        print("4. –î–∞–π—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ")
        print("\n‚ú® –ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        print("‚ùå APK –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ bin/")
        print("\nüîç –°–æ–¥–µ—Ä–∂–∏–º–æ–µ bin/:")
        get_ipython().system('ls -la bin/')
        print("\n‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–±–æ—Ä–∫–∏ –≤—ã—à–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫")
else:
    print("‚ùå –ü–∞–ø–∫–∞ bin/ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    print("–°–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
    print("\nüîç –¢–µ–∫—É—â–∏–µ —Ñ–∞–π–ª—ã:")
    get_ipython().system('ls -la')

print("=" * 60)
