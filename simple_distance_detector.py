#!/usr/bin/env python3
"""
üéØ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∑–≤—É–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ—Ü–∏–±–µ–ª
"""

import numpy as np
import sounddevice as sd
import json
import time
import math
from datetime import datetime
from collections import deque
import scipy.signal

class SimpleDistanceDetector:
    def __init__(self, calibration_file='distance_calibration.json'):
        print("üéØ === –ü–†–û–°–¢–û–ô –î–ï–¢–ï–ö–¢–û–† –†–ê–°–°–¢–û–Ø–ù–ò–Ø ===")
        print("üìè –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –ø–æ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –∑–≤—É–∫–∞")
        print("üîä –ê–Ω–∞–ª–∏–∑ –¥–µ—Ü–∏–±–µ–ª –±–µ–∑ –ò–ò –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        print("=" * 50)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.SAMPLE_RATE = 44100
        self.WINDOW_SIZE = 0.5  # –°–µ–∫—É–Ω–¥—ã
        self.CHUNK_SIZE = int(self.SAMPLE_RATE * self.WINDOW_SIZE)
        self.NOISE_THRESHOLD = 0.001
        self.MIN_VOLUME = 0.005
        
        # –ë—É—Ñ–µ—Ä—ã
        self.volume_buffer = deque(maxlen=10)
        self.distance_buffer = deque(maxlen=5)
        self.db_buffer = deque(maxlen=3)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.load_calibration_data(calibration_file)
        
        # –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
        self.calibrate_microphone()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.running = False
        self.environment_type = "indoor"
        
    def load_calibration_data(self, filename):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON"""
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                self.calibration = json.load(f)
            print(f"‚úÖ –ö–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {filename}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
            self.distance_table = []
            mapping = self.calibration['calibration_data']['distance_db_mapping']
            for distance_str, data in mapping.items():
                distance = float(distance_str)
                db = data['db']
                self.distance_table.append((db, distance, data['description']))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–ë
            self.distance_table.sort(key=lambda x: x[0], reverse=True)
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: {e}")
            self.create_default_calibration()
    
    def create_default_calibration(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        self.distance_table = [
            (70, 0.3, "–û—á–µ–Ω—å –±–ª–∏–∑–∫–æ"),
            (65, 0.5, "–ë–ª–∏–∑–∫–æ"),
            (60, 1.0, "–†—è–¥–æ–º"),
            (55, 1.5, "–ë–ª–∏–∑–∫–æ"),
            (50, 2.0, "–°—Ä–µ–¥–Ω–µ"),
            (45, 3.0, "–î–∞–ª–µ–∫–æ"),
            (40, 4.0, "–î–∞–ª–µ–∫–æ"),
            (35, 5.0, "–û—á–µ–Ω—å –¥–∞–ª–µ–∫–æ"),
            (30, 7.0, "–ö—Ä–∞–π–Ω–µ –¥–∞–ª–µ–∫–æ"),
            (25, 10.0, "–ù–∞ –ø—Ä–µ–¥–µ–ª–µ")
        ]
        print("üìä –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    def calibrate_microphone(self):
        """–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
        print("üéôÔ∏è –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞...")
        print("üîá –°–æ–∑–¥–∞–π—Ç–µ —Ç–∏—à–∏–Ω—É –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã...")
        
        # –ó–∞–ø–∏—Å—å —Ç–∏—à–∏–Ω—ã
        silence_samples = []
        for i in range(3):
            print(f"   {3-i}...")
            time.sleep(1)
            audio = sd.rec(int(self.SAMPLE_RATE * 0.5), samplerate=self.SAMPLE_RATE, channels=1, dtype=np.float32)
            sd.wait()
            silence_samples.append(np.abs(audio.flatten()).mean())
        
        self.noise_floor = max(np.mean(silence_samples), 1e-8)
        print(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å —à—É–º–∞: {self.noise_floor:.6f}")
    
    def calculate_decibels(self, audio_data):
        """–†–∞—Å—á–µ—Ç –¥–µ—Ü–∏–±–µ–ª –∏–∑ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö"""
        # RMS (Root Mean Square)
        rms = np.sqrt(np.mean(audio_data**2))
        
        # –ò–∑–±–µ–≥–∞–µ–º –ª–æ–≥–∞—Ä–∏—Ñ–º –æ—Ç –Ω—É–ª—è
        if rms < self.noise_floor:
            rms = self.noise_floor
            
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –¥–µ—Ü–∏–±–µ–ª—ã
        db = 20 * np.log10(rms / self.noise_floor)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è)
        db = max(0, db + 60)  # –ë–∞–∑–æ–≤–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è
        
        return db
    
    def interpolate_distance(self, db_level):
        """–ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ë"""
        # –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ
        for i, (table_db, table_dist, desc) in enumerate(self.distance_table):
            if db_level >= table_db:
                if i == 0:
                    return table_dist, desc
                
                # –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
                prev_db, prev_dist, prev_desc = self.distance_table[i-1]
                
                # –ü—Ä–æ–ø–æ—Ä—Ü–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
                ratio = (db_level - table_db) / (prev_db - table_db)
                distance = table_dist + ratio * (prev_dist - table_dist)
                
                return distance, f"–ú–µ–∂–¥—É {prev_desc.lower()} –∏ {desc.lower()}"
        
        # –ï—Å–ª–∏ –¥–ë –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤ —Ç–∞–±–ª–∏—Ü–µ
        return self.distance_table[-1][1], self.distance_table[-1][2]
    
    def smooth_values(self, db_level, distance):
        """–°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π"""
        self.db_buffer.append(db_level)
        self.distance_buffer.append(distance)
        
        if len(self.db_buffer) >= 3:
            smoothed_db = np.mean(list(self.db_buffer))
            smoothed_distance = np.median(list(self.distance_buffer))
            return smoothed_db, smoothed_distance
        
        return db_level, distance
    
    def format_distance(self, distance):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è"""
        if distance < 1.0:
            return f"{distance*100:.0f}—Å–º"
        elif distance < 10.0:
            return f"{distance:.1f}–º"
        else:
            return f"{distance:.0f}–º"
    
    def get_distance_icon(self, distance):
        """–ò–∫–æ–Ω–∫–∞ –¥–ª—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è"""
        if distance < 0.5:
            return "üî•"  # –û—á–µ–Ω—å –±–ª–∏–∑–∫–æ
        elif distance < 1.5:
            return "üìç"  # –ë–ª–∏–∑–∫–æ
        elif distance < 3.0:
            return "üìå"  # –°—Ä–µ–¥–Ω–µ
        elif distance < 5.0:
            return "üì°"  # –î–∞–ª–µ–∫–æ
        else:
            return "üå´Ô∏è"  # –û—á–µ–Ω—å –¥–∞–ª–µ–∫–æ
    
    def create_volume_bar(self, volume):
        """–í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≥—Ä–æ–º–∫–æ—Å—Ç–∏"""
        bar_length = 25
        max_volume = 0.1  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ–∂–∏–¥–∞–µ–º–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å
        filled = int((volume / max_volume) * bar_length)
        filled = min(filled, bar_length)
        
        bar = "üîä |" + "‚ñà" * filled + "‚ñë" * (bar_length - filled) + f"| {volume:.3f}"
        return bar
    
    def create_distance_scale(self, distance):
        """–®–∫–∞–ª–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è"""
        scale_length = 40
        max_distance = 10.0
        position = int((distance / max_distance) * scale_length)
        position = min(position, scale_length)
        
        scale = "üìè |" + "‚ñë" * position + "‚óè" + "‚ñë" * (scale_length - position) + f"| {self.format_distance(distance)}"
        return scale
    
    def get_detection_quality(self, volume, db_level):
        """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏"""
        if volume > 0.02 and db_level > 40:
            return "–û–¢–õ–ò–ß–ù–û", "üü¢"
        elif volume > 0.01 and db_level > 30:
            return "–•–û–†–û–®–û", "üü°" 
        elif volume > 0.005 and db_level > 20:
            return "–°–†–ï–î–ù–ï", "üü†"
        else:
            return "–°–õ–ê–ë–û", "üî¥"
    
    def audio_callback(self, indata, frames, time, status):
        """Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ"""
        if status:
            print(f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –∞—É–¥–∏–æ: {status}")
        
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        audio_data = indata[:, 0].copy()
        
        # –ò–∑–º–µ—Ä—è–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
        volume = np.abs(audio_data).mean()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–∏—à–∏–Ω—É
        if volume < self.NOISE_THRESHOLD:
            return
            
        # –ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è
        self.volume_buffer.append(volume)
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –∑–≤—É–∫–∏
        if volume < self.MIN_VOLUME:
            return
        
        try:
            # –†–∞—Å—á–µ—Ç –¥–µ—Ü–∏–±–µ–ª
            db_level = self.calculate_decibels(audio_data)
            
            # –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
            distance, description = self.interpolate_distance(db_level)
            
            # –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
            smoothed_db, smoothed_distance = self.smooth_values(db_level, distance)
            
            # –ö–∞—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–∫—Ü–∏–∏
            quality, quality_icon = self.get_detection_quality(volume, smoothed_db)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.display_detection(volume, smoothed_db, smoothed_distance, description, quality, quality_icon)
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
    
    def display_detection(self, volume, db_level, distance, description, quality, quality_icon):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        current_time = datetime.now().strftime("%H:%M:%S")
        distance_icon = self.get_distance_icon(distance)
        
        # –û—á–∏—Å—Ç–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        print("\n" + "=" * 60)
        print(f"üéØ === –ê–ù–ê–õ–ò–ó –†–ê–°–°–¢–û–Ø–ù–ò–Ø === {current_time}")
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        volume_bar = self.create_volume_bar(volume)
        distance_scale = self.create_distance_scale(distance)
        
        print(volume_bar)
        print(distance_scale)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"\nüì¢ –î–µ—Ü–∏–±–µ–ª—ã:      {db_level:.1f} –¥–ë")
        print(f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:    {distance_icon} {self.format_distance(distance)}")
        print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:      {description}")
        print(f"{quality_icon} –ö–∞—á–µ—Å—Ç–≤–æ:      {quality}")
        print(f"üè† –û–∫—Ä—É–∂–µ–Ω–∏–µ:     {self.environment_type.upper()}")
        
        print("=" * 60)
    
    def list_audio_devices(self):
        """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        print("üé§ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
        devices = sd.query_devices()
        for i, device in enumerate(devices):
            if device['max_input_channels'] > 0:
                print(f"   {i}: {device['name']} ‚úÖ")
    
    def start_detection(self):
        """–ó–∞–ø—É—Å–∫ –¥–µ—Ç–µ–∫—Ü–∏–∏"""
        print("\nüéØ === –ü–ê–†–ê–ú–ï–¢–†–´ –î–ï–¢–ï–ö–¢–û–†–ê ===")
        print(f"   üìä –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏: {self.SAMPLE_RATE} –ì—Ü")
        print(f"   üîá –ü–æ—Ä–æ–≥ —à—É–º–∞: {self.NOISE_THRESHOLD}")
        print(f"   üéöÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å: {self.MIN_VOLUME}")
        print(f"   üè† –û–∫—Ä—É–∂–µ–Ω–∏–µ: {self.environment_type}")
        print("=" * 50)
        
        self.list_audio_devices()
        
        print("\nüéØ –î–µ—Ç–µ–∫—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üó£Ô∏è –ì–æ–≤–æ—Ä–∏—Ç–µ –∏–ª–∏ –∏–∑–¥–∞–≤–∞–π—Ç–µ –∑–≤—É–∫–∏...")
        print("üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        print("(Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)\n")
        
        self.running = True
        
        try:
            with sd.InputStream(
                samplerate=self.SAMPLE_RATE,
                channels=1,
                callback=self.audio_callback,
                blocksize=self.CHUNK_SIZE,
                dtype=np.float32
            ):
                while self.running:
                    time.sleep(0.1)
                    
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞...")
            self.running = False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")

def main():
    try:
        detector = SimpleDistanceDetector()
        detector.start_detection()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()