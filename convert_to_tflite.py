"""
üîß –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ H5 –≤ TensorFlow Lite –¥–ª—è Android
–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–¥ —Å–±–æ—Ä–∫–æ–π APK
"""

import tensorflow as tf
import os
import numpy as np

def convert_model_to_tflite():
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è H5 –º–æ–¥–µ–ª–∏ –≤ TFLite —Ñ–æ—Ä–º–∞—Ç"""
    
    model_path = 'model/my_sound_model.h5'
    tflite_path = 'model/my_sound_model.tflite'
    
    print("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –¥–ª—è Android...")
    print(f"üìÇ –ò—Å—Ö–æ–¥–Ω–∞—è –º–æ–¥–µ–ª—å: {model_path}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
    if not os.path.exists(model_path):
        print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
        print("–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å —Å –ø–æ–º–æ—â—å—é train_balanced.py")
        return False
    
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ H5 –º–æ–¥–µ–ª–∏
        print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ H5 –º–æ–¥–µ–ª–∏...")
        model = tf.keras.models.load_model(model_path, compile=False)
        
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        print(f"üìä –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:")
        model.summary()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ TFLite
        print("\nüîß –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ TFLite...")
        converter = tf.lite.TFLiteConverter.from_keras_model(model)
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        converter.optimizations = [tf.lite.Optimize.DEFAULT]
        
        # –ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        # converter.target_spec.supported_types = [tf.float16]
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
        tflite_model = converter.convert()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ {tflite_path}...")
        with open(tflite_path, 'wb') as f:
            f.write(tflite_model)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–º–µ—Ä–∞—Ö
        h5_size = os.path.getsize(model_path) / (1024 * 1024)
        tflite_size = os.path.getsize(tflite_path) / (1024 * 1024)
        
        print(f"\n‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üì¶ –†–∞–∑–º–µ—Ä H5: {h5_size:.2f} MB")
        print(f"üì¶ –†–∞–∑–º–µ—Ä TFLite: {tflite_size:.2f} MB")
        print(f"üìâ –£–º–µ–Ω—å—à–µ–Ω–∏–µ: {(1 - tflite_size/h5_size)*100:.1f}%")
        
        # –¢–µ—Å—Ç –º–æ–¥–µ–ª–∏
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TFLite –º–æ–¥–µ–ª–∏...")
        test_tflite_model(tflite_path)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        return False


def test_tflite_model(tflite_path):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TFLite –º–æ–¥–µ–ª–∏"""
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞
        interpreter = tf.lite.Interpreter(model_path=tflite_path)
        interpreter.allocate_tensors()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ö–æ–¥–µ/–≤—ã—Ö–æ–¥–µ
        input_details = interpreter.get_input_details()
        output_details = interpreter.get_output_details()
        
        print(f"üì• –í—Ö–æ–¥: shape={input_details[0]['shape']}, dtype={input_details[0]['dtype']}")
        print(f"üì§ –í—ã—Ö–æ–¥: shape={output_details[0]['shape']}, dtype={output_details[0]['dtype']}")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –≤—Ö–æ–¥ (1024 features –æ—Ç YAMNet)
        test_input = np.random.randn(1, 1024).astype(np.float32)
        
        # –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
        interpreter.set_tensor(input_details[0]['index'], test_input)
        interpreter.invoke()
        output = interpreter.get_tensor(output_details[0]['index'])
        
        print(f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!")
        print(f"üìä –¢–µ—Å—Ç–æ–≤—ã–π –≤—ã—Ö–æ–¥: {output[0]}")
        print(f"üéØ –ö–ª–∞—Å—Å: {'Positive' if output[0][1] > 0.5 else 'Negative'} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {max(output[0]):.2%})")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")


def create_quantized_model():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–≤–∞–Ω—Ç–∏–∑–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ (–µ—â–µ –º–µ–Ω—å—à–µ —Ä–∞–∑–º–µ—Ä)"""
    
    model_path = 'model/my_sound_model.h5'
    quantized_path = 'model/my_sound_model_quantized.tflite'
    
    print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ –∫–≤–∞–Ω—Ç–∏–∑–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏...")
    
    try:
        model = tf.keras.models.load_model(model_path, compile=False)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏–µ–π
        converter = tf.lite.TFLiteConverter.from_keras_model(model)
        converter.optimizations = [tf.lite.Optimize.DEFAULT]
        converter.target_spec.supported_types = [tf.float16]  # Float16 –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è
        
        quantized_model = converter.convert()
        
        with open(quantized_path, 'wb') as f:
            f.write(quantized_model)
        
        size = os.path.getsize(quantized_path) / (1024 * 1024)
        print(f"‚úÖ –ö–≤–∞–Ω—Ç–∏–∑–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {quantized_path}")
        print(f"üì¶ –†–∞–∑–º–µ—Ä: {size:.2f} MB")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏–∏: {e}")
        return False


if __name__ == '__main__':
    print("=" * 60)
    print("ü§ñ TensorFlow Lite Converter –¥–ª—è Android")
    print("=" * 60)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥–µ–ª–∏
    success = convert_model_to_tflite()
    
    if success:
        print("\n" + "=" * 60)
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å–æ–∑–¥–∞–Ω–∏–µ –∫–≤–∞–Ω—Ç–∏–∑–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        response = input("–°–æ–∑–¥–∞—Ç—å –∫–≤–∞–Ω—Ç–∏–∑–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é? (y/n): ")
        if response.lower() == 'y':
            create_quantized_model()
        
        print("\n" + "=" * 60)
        print("‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Å–æ–±—Ä–∞—Ç—å APK:")
        print("   buildozer android debug")
        print("=" * 60)
    else:
        print("\n‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
