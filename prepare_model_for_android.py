"""
üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è Android APK
–£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –º–æ–¥–µ–ª—å –≤–∫–ª—é—á–µ–Ω–∞ –∏ –ø—É—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
"""

import os
import shutil

print("=" * 60)
print("üì± –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è Android")
print("=" * 60)

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏
print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏...")

model_files = {
    'model/my_sound_model.h5': 'H5 –º–æ–¥–µ–ª—å',
    'model/my_sound_model.tflite': 'TFLite –º–æ–¥–µ–ª—å',
}

models_found = []
for path, desc in model_files.items():
    if os.path.exists(path):
        size = os.path.getsize(path) / (1024 * 1024)
        print(f"   ‚úÖ {desc}: {path} ({size:.2f} MB)")
        models_found.append(path)
    else:
        print(f"   ‚ùå {desc}: {path} - –ù–ï –ù–ê–ô–î–ï–ù–ê!")

if not models_found:
    print("\n‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
    print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python convert_to_tflite.py")
    exit(1)

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ buildozer.spec
print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ buildozer.spec...")

with open('buildozer.spec', 'r', encoding='utf-8') as f:
    spec = f.read()

if 'model/*.tflite' in spec or 'model/*.h5' in spec:
    print("   ‚úÖ –ú–æ–¥–µ–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ buildozer.spec")
else:
    print("   ‚ö†Ô∏è –ú–æ–¥–µ–ª–∏ –ù–ï –≤–∫–ª—é—á–µ–Ω—ã –≤ buildozer.spec!")
    print("   –î–æ–±–∞–≤–ª—è—é...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª–∏
    spec = spec.replace(
        'source.include_patterns = ',
        'source.include_patterns = model/*.tflite,model/*.h5,'
    )
    
    with open('buildozer.spec', 'w', encoding='utf-8') as f:
        f.write(spec)
    
    print("   ‚úÖ –ú–æ–¥–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ buildozer.spec")

# 3. –°–æ–∑–¥–∞–µ–º main.py –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")

if os.path.exists('main.py'):
    print("   ‚ÑπÔ∏è main.py —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
else:
    if os.path.exists('android_sound_detector.py'):
        shutil.copy('android_sound_detector.py', 'main.py')
        print("   ‚úÖ –°–æ–∑–¥–∞–Ω main.py")
    else:
        print("   ‚ùå android_sound_detector.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤
print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")

required = [
    'distance_calibration.json',
    'buildozer.spec',
]

for file in required:
    if os.path.exists(file):
        print(f"   ‚úÖ {file}")
    else:
        print(f"   ‚ùå {file} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")

# 5. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤
print("\n5Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞...")

test_script = """
# –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –Ω–∞ Android
import os

print("–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:", os.getcwd())
print("\\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
for root, dirs, files in os.walk('.'):
    level = root.replace('.', '').count(os.sep)
    indent = ' ' * 2 * level
    print(f'{indent}{os.path.basename(root)}/')
    subindent = ' ' * 2 * (level + 1)
    for file in files:
        if file.endswith(('.h5', '.tflite', '.json')):
            print(f'{subindent}{file}')
"""

with open('test_model_paths.py', 'w', encoding='utf-8') as f:
    f.write(test_script)

print("   ‚úÖ –°–æ–∑–¥–∞–Ω test_model_paths.py")

# –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
print("\n" + "=" * 60)
print("‚úÖ –ü–û–î–ì–û–¢–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
print("=" * 60)
print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
print("1. –ó–∞–∫–æ–º–º–∏—Ç—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
print("   git add .")
print('   git commit -m "Fix: Include model in APK"')
print("   git push")
print("\n2. –ü–µ—Ä–µ—Å–æ–±–µ—Ä–∏—Ç–µ APK –≤ Colab:")
print("   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥")
print("   - –ú–æ–¥–µ–ª–∏ —Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–µ–Ω—ã")
print("\n3. –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ Android:")
print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: adb logcat | grep python")
print("   - –í–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è")
print("\n" + "=" * 60)
