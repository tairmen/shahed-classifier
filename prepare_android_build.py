"""
üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Å–±–æ—Ä–∫–∏ APK
–ó–∞–ø—É—Å–∫–∞–π—Ç–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞ —Å–±–æ—Ä–∫—É (WSL/Colab/Linux)
"""

import os
import shutil
import json
from pathlib import Path

def prepare_for_android_build():
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∫ —Å–±–æ—Ä–∫–µ Android APK"""
    
    print("=" * 60)
    print("üì± –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Å–±–æ—Ä–∫–∏ Android APK")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    required_files = {
        'android_sound_detector.py': '–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
        'buildozer.spec': '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±–æ—Ä–∫–∏',
        'distance_calibration.json': '–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π',
        'model/my_sound_model.h5': 'AI –º–æ–¥–µ–ª—å (H5)',
        'model/my_sound_model.tflite': 'AI –º–æ–¥–µ–ª—å (TFLite)',
    }
    
    missing = []
    for file, desc in required_files.items():
        if os.path.exists(file):
            print(f"   ‚úÖ {file} - {desc}")
        else:
            print(f"   ‚ùå {file} - {desc} –ù–ï –ù–ê–ô–î–ï–ù!")
            missing.append(file)
    
    if missing:
        print(f"\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing)}")
        if 'model/my_sound_model.tflite' in missing:
            print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python convert_to_tflite.py")
        return False
    
    # 2. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è Buildozer
    print("\n2Ô∏è‚É£ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")
    
    # Buildozer –æ–∂–∏–¥–∞–µ—Ç main.py, –Ω–æ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º android_sound_detector.py
    # –°–æ–∑–¥–∞–¥–∏–º –∫–æ–ø–∏—é –∫–∞–∫ main.py
    if not os.path.exists('main.py'):
        shutil.copy('android_sound_detector.py', 'main.py')
        print("   ‚úÖ –°–æ–∑–¥–∞–Ω main.py –∏–∑ android_sound_detector.py")
    else:
        print("   ‚ÑπÔ∏è main.py —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ buildozer.spec
    print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ buildozer.spec...")
    with open('buildozer.spec', 'r', encoding='utf-8') as f:
        spec_content = f.read()
    
    checks = {
        'title = Sound Detector': '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
        'package.name = sounddetector': '–ò–º—è –ø–∞–∫–µ—Ç–∞',
        'RECORD_AUDIO': '–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞',
        'tensorflow-lite': 'TensorFlow Lite',
    }
    
    for check, desc in checks.items():
        if check in spec_content:
            print(f"   ‚úÖ {desc}")
        else:
            print(f"   ‚ö†Ô∏è {desc} - –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    # 4. –°–æ–∑–¥–∞–Ω–∏–µ requirements.txt –¥–ª—è buildozer
    print("\n4Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ requirements.txt...")
    requirements = [
        'kivy==2.2.1',
        'numpy==1.24.3',
        'tensorflow-lite==2.13.0',
        'pyjnius==1.5.0',
    ]
    
    with open('requirements_android.txt', 'w') as f:
        f.write('\n'.join(requirements))
    
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω requirements_android.txt")
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤
    print("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤...")
    
    h5_size = os.path.getsize('model/my_sound_model.h5') / (1024 * 1024)
    tflite_size = os.path.getsize('model/my_sound_model.tflite') / (1024 * 1024)
    
    print(f"   üì¶ H5 –º–æ–¥–µ–ª—å: {h5_size:.2f} MB")
    print(f"   üì¶ TFLite –º–æ–¥–µ–ª—å: {tflite_size:.2f} MB")
    
    if tflite_size > 50:
        print(f"   ‚ö†Ô∏è TFLite –º–æ–¥–µ–ª—å –±–æ–ª—å—à–∞—è! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è.")
    else:
        print(f"   ‚úÖ –†–∞–∑–º–µ—Ä TFLite –º–æ–¥–µ–ª–∏ –æ–ø—Ç–∏–º–∞–ª–µ–Ω")
    
    # 6. –ü–æ–¥—Å—á–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
    print("\n6Ô∏è‚É£ –ü–æ–¥—Å—á–µ—Ç –¥–∞–Ω–Ω—ã—Ö...")
    
    positive_count = len(list(Path('data/positive').glob('*.wav'))) if os.path.exists('data/positive') else 0
    negative_count = len(list(Path('data/negative').glob('*.wav'))) if os.path.exists('data/negative') else 0
    
    print(f"   üìä Positive –ø—Ä–∏–º–µ—Ä–æ–≤: {positive_count}")
    print(f"   üìä Negative –ø—Ä–∏–º–µ—Ä–æ–≤: {negative_count}")
    print(f"   ‚ÑπÔ∏è –≠—Ç–∏ —Ñ–∞–π–ª—ã –ù–ï –≤–∫–ª—é—á–∞—é—Ç—Å—è –≤ APK (—Ç–æ–ª—å–∫–æ –º–æ–¥–µ–ª—å)")
    
    # 7. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è WSL
    print("\n7Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ WSL —Å–∫—Ä–∏–ø—Ç–∞...")
    
    wsl_script = """#!/bin/bash
# Automated APK build in WSL

echo "=========================================="
echo "Building Android APK in WSL"
echo "=========================================="

# Install dependencies (if not already installed)
echo "Step 1: Checking dependencies..."
if ! command -v buildozer &> /dev/null; then
    echo "Installing buildozer..."
    sudo apt update
    sudo apt install -y python3-pip build-essential git openjdk-17-jdk
    pip3 install --upgrade cython==0.29.33 buildozer
fi

# Clean previous builds
echo "Step 2: Cleaning previous builds..."
buildozer android clean

# Build APK
echo "Step 3: Building APK (first build takes 20-40 minutes)..."
buildozer -v android debug

# Check result
if [ -f "bin/*.apk" ]; then
    echo "=========================================="
    echo "APK successfully built!"
    echo "File: bin/*.apk"
    echo "=========================================="
    ls -lh bin/*.apk
else
    echo "=========================================="
    echo "APK build failed"
    echo "Check logs above"
    echo "=========================================="
fi
"""
    
    with open('build_in_wsl.sh', 'w', encoding='utf-8', newline='\n') as f:
        f.write(wsl_script)
    
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω build_in_wsl.sh")
    
    # 8. –°–æ–∑–¥–∞–Ω–∏–µ Colab –Ω–æ—É—Ç–±—É–∫–∞
    print("\n8Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ Colab –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏...")
    
    colab_instructions = """
# üì± Google Colab - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏ APK

## –í–∞—Ä–∏–∞–Ω—Ç 1: –ü—Ä–æ–µ–∫—Ç –Ω–∞ GitHub

```python
!pip install buildozer cython==0.29.33
!apt-get update && apt-get install -y openjdk-17-jdk

!git clone https://github.com/tairmen/shahed-classifier.git
%cd shahed-classifier

!buildozer -v android debug

from google.colab import files
files.download('bin/sounddetector-1.0.0-arm64-v8a-debug.apk')
```

## –í–∞—Ä–∏–∞–Ω—Ç 2: –ó–∞–≥—Ä—É–∑–∫–∞ ZIP –≤—Ä—É—á–Ω—É—é

1. –°–æ–∑–¥–∞–π—Ç–µ ZIP –∞—Ä—Ö–∏–≤ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –≤–∞—à–µ–º –ü–ö:
   - android_sound_detector.py (–∏–ª–∏ main.py)
   - buildozer.spec
   - distance_calibration.json
   - model/my_sound_model.tflite
   - requirements_android.txt

2. –í Colab –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:

```python
from google.colab import files
uploaded = files.upload()  # –ó–∞–≥—Ä—É–∑–∏—Ç–µ ZIP

!unzip sound_classifier.zip
%cd sound_classifier

!pip install buildozer cython==0.29.33
!apt-get update && apt-get install -y openjdk-17-jdk

!buildozer -v android debug

files.download('bin/sounddetector-1.0.0-arm64-v8a-debug.apk')
```

## –°—Å—ã–ª–∫–∞ –Ω–∞ Colab:
https://colab.research.google.com/
"""
    
    with open('COLAB_BUILD.md', 'w', encoding='utf-8') as f:
        f.write(colab_instructions)
    
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω COLAB_BUILD.md")
    
    # 9. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
    print("\n" + "=" * 60)
    print("‚úÖ –ü–†–û–ï–ö–¢ –ì–û–¢–û–í –ö –°–ë–û–†–ö–ï APK!")
    print("=" * 60)
    print("\nüìã –ß—Ç–æ –¥–∞–ª—å—à–µ:\n")
    print("1Ô∏è‚É£ WSL (Windows):")
    print("   - –û—Ç–∫—Ä–æ–π—Ç–µ WSL: wsl")
    print("   - –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ WSL")
    print("   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ: bash build_in_wsl.sh")
    print("\n2Ô∏è‚É£ Google Colab (–ü—Ä–æ—â–µ –≤—Å–µ–≥–æ!):")
    print("   - –û—Ç–∫—Ä–æ–π—Ç–µ: https://colab.research.google.com/")
    print("   - –°–ª–µ–¥—É–π—Ç–µ COLAB_BUILD.md")
    print("\n3Ô∏è‚É£ Linux:")
    print("   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ: buildozer android debug")
    print("\n" + "=" * 60)
    
    return True


def create_zip_for_colab():
    """–°–æ–∑–¥–∞–Ω–∏–µ ZIP –∞—Ä—Ö–∏–≤–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Colab"""
    import zipfile
    
    print("\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ ZIP –∞—Ä—Ö–∏–≤–∞ –¥–ª—è Colab...")
    
    files_to_zip = [
        'android_sound_detector.py',
        'buildozer.spec',
        'distance_calibration.json',
        'model/my_sound_model.tflite',
        'requirements_android.txt',
        'COLAB_BUILD.md',
    ]
    
    zip_name = 'sound_classifier_android.zip'
    
    with zipfile.ZipFile(zip_name, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for file in files_to_zip:
            if os.path.exists(file):
                zipf.write(file)
                print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {file}")
            else:
                print(f"   ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω: {file} (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
    
    size = os.path.getsize(zip_name) / (1024 * 1024)
    print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω –∞—Ä—Ö–∏–≤: {zip_name} ({size:.2f} MB)")
    print(f"   –ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ –≤ Google Colab!")
    
    return zip_name


if __name__ == '__main__':
    success = prepare_for_android_build()
    
    if success:
        response = input("\n–°–æ–∑–¥–∞—Ç—å ZIP –∞—Ä—Ö–∏–≤ –¥–ª—è Colab? (y/n): ")
        if response.lower() == 'y':
            create_zip_for_colab()
        
        print("\nüéâ –ì–æ—Ç–æ–≤–æ! –£–¥–∞—á–∏ —Å–æ —Å–±–æ—Ä–∫–æ–π APK!")
