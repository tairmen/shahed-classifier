#!/usr/bin/env python3
"""
üéØ –ü—Ä–æ—Å—Ç–æ–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –∑–≤—É–∫–æ–≤
–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –ª—é–±—ã–µ –∑–≤—É–∫–∏ –±–µ–∑ AI, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –¥–µ—Ç–µ–∫—Ü–∏–∏
"""

import numpy as np
import sounddevice as sd
import json
import time
import math
from datetime import datetime
from collections import deque

class SimpleUniversalSoundDetector:
    def __init__(self, calibration_file='distance_calibration.json'):
        print("üéµ === –ü–†–û–°–¢–û–ô –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –î–ï–¢–ï–ö–¢–û–† ===")
        print("üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ª—é–±—ã—Ö –∑–≤—É–∫–æ–≤ –±–µ–∑ AI")
        print("‚úÖ –ü–æ–∫–∞–∑ —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã—Ö –∑–≤—É–∫–æ–≤")
        print("=" * 50)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.SAMPLE_RATE = 44100
        self.WINDOW_SIZE = 0.5  # –°–µ–∫—É–Ω–¥—ã
        self.CHUNK_SIZE = int(self.SAMPLE_RATE * self.WINDOW_SIZE)
        
        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
        self.VOLUME_THRESHOLD = 0.015      # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å
        self.ENERGY_THRESHOLD = 0.008      # –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥
        self.PEAK_THRESHOLD = 0.05         # –ü–æ—Ä–æ–≥ –¥–ª—è –ø–∏–∫–æ–≤
        self.FREQUENCY_THRESHOLD = 100     # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞
        
        # –ë—É—Ñ–µ—Ä—ã
        self.volume_history = deque(maxlen=20)
        self.db_buffer = deque(maxlen=5)
        self.distance_buffer = deque(maxlen=5)
        
        # –°—á–µ—Ç—á–∏–∫–∏
        self.detections_count = 0
        self.frames_processed = 0
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.load_calibration_data(calibration_file)
        
        # –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞
        self.calibrate_microphone()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.running = False
        self.last_detection_time = 0
        self.min_interval = 0.3  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –¥–µ—Ç–µ–∫—Ü–∏—è–º–∏
        
    def load_calibration_data(self, filename):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                self.calibration = json.load(f)
            print(f"‚úÖ –ö–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {filename}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
            self.distance_table = []
            mapping = self.calibration['calibration_data']['distance_db_mapping']
            for distance_str, data in mapping.items():
                distance = float(distance_str)
                db = data['db']
                self.distance_table.append((db, distance, data['description']))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–ë
            self.distance_table.sort(key=lambda x: x[0], reverse=True)
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: {e}")
            self.create_default_calibration()
    
    def create_default_calibration(self):
        """–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç JSON)"""
        self.distance_table = [
            (70, 0.3, "–û—á–µ–Ω—å –±–ª–∏–∑–∫–æ - –≥—Ä–æ–º–∫–∏–π –∑–≤—É–∫"),
            (65, 0.5, "–ë–ª–∏–∑–∫–æ - —Å—Ä–µ–¥–Ω–∏–π –∑–≤—É–∫"),
            (60, 1.0, "–†—è–¥–æ–º - –æ–±—ã—á–Ω—ã–π –∑–≤—É–∫"),
            (55, 1.5, "–ë–ª–∏–∑–∫–æ - —Ç–∏—Ö–∏–π –∑–≤—É–∫"),
            (50, 2.0, "–°—Ä–µ–¥–Ω–µ - –∑–≤—É–∫ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏"),
            (45, 3.0, "–î–∞–ª–µ–∫–æ - –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–π –∑–≤—É–∫"),
            (40, 4.0, "–î–∞–ª–µ–∫–æ - —Å–ª–∞–±—ã–π –∑–≤—É–∫"),
            (35, 5.0, "–û—á–µ–Ω—å –¥–∞–ª–µ–∫–æ - –µ–¥–≤–∞ —Å–ª—ã—à–Ω—ã–π –∑–≤—É–∫"),
            (30, 7.0, "–ö—Ä–∞–π–Ω–µ –¥–∞–ª–µ–∫–æ - –æ—Ç–¥–∞–ª–µ–Ω–Ω—ã–π –∑–≤—É–∫"),
            (25, 10.0, "–ù–∞ –ø—Ä–µ–¥–µ–ª–µ —Å–ª—ã—à–∏–º–æ—Å—Ç–∏")
        ]
        print("üìä –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç JSON —Ñ–∞–π–ª—É)")
    
    def calibrate_microphone(self):
        """–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
        print("üéôÔ∏è –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞...")
        print("üîá –°–æ–∑–¥–∞–π—Ç–µ —Ç–∏—à–∏–Ω—É –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã...")
        
        silence_samples = []
        for i in range(3):
            print(f"   {3-i}...")
            time.sleep(1)
            audio = sd.rec(int(self.SAMPLE_RATE * 0.5), samplerate=self.SAMPLE_RATE, channels=1, dtype=np.float32)
            sd.wait()
            silence_samples.append(np.abs(audio.flatten()).mean())
        
        self.noise_floor = max(np.mean(silence_samples), 1e-8)
        self.background_volume = max(np.mean(silence_samples), 1e-6)
        print(f"‚úÖ –§–æ–Ω–æ–≤—ã–π —à—É–º: {self.background_volume:.6f}")
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ —à—É–º–∞
        self.adaptive_volume_threshold = max(self.VOLUME_THRESHOLD, self.background_volume * 3)
        self.adaptive_energy_threshold = max(self.ENERGY_THRESHOLD, self.background_volume * 2)
        
        print(f"üéØ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥ –≥—Ä–æ–º–∫–æ—Å—Ç–∏: {self.adaptive_volume_threshold:.6f}")
        print(f"‚ö° –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥: {self.adaptive_energy_threshold:.6f}")
    
    def calculate_decibels(self, audio_data):
        """–†–∞—Å—á–µ—Ç –¥–µ—Ü–∏–±–µ–ª"""
        rms = np.sqrt(np.mean(audio_data**2))
        if rms < self.noise_floor:
            rms = self.noise_floor
        db = 20 * np.log10(rms / self.noise_floor)
        return max(0, db + 60)  # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö –∑–≤—É–∫–æ–≤
    
    def interpolate_distance(self, db_level):
        """–ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è"""
        for i, (table_db, table_dist, desc) in enumerate(self.distance_table):
            if db_level >= table_db:
                if i == 0:
                    return table_dist, desc
                
                prev_db, prev_dist, prev_desc = self.distance_table[i-1]
                ratio = (db_level - table_db) / (prev_db - table_db)
                distance = table_dist + ratio * (prev_dist - table_dist)
                return distance, f"–ú–µ–∂–¥—É {prev_desc.lower()} –∏ {desc.lower()}"
        
        return self.distance_table[-1][1], self.distance_table[-1][2]
    
    def analyze_frequency_content(self, audio_data):
        """–ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è"""
        # FFT
        fft = np.fft.fft(audio_data)
        magnitude = np.abs(fft[:len(fft)//2])
        freqs = np.fft.fftfreq(len(audio_data), 1/self.SAMPLE_RATE)[:len(fft)//2]
        
        # –ß–∞—Å—Ç–æ—Ç–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
        low_mask = (freqs >= 20) & (freqs < 300)     # –ù–∏–∑–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã
        mid_mask = (freqs >= 300) & (freqs < 2000)   # –°—Ä–µ–¥–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã
        high_mask = (freqs >= 2000) & (freqs < 8000) # –í—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã
        
        low_energy = np.mean(magnitude[low_mask]) if np.any(low_mask) else 0
        mid_energy = np.mean(magnitude[mid_mask]) if np.any(mid_mask) else 0
        high_energy = np.mean(magnitude[high_mask]) if np.any(high_mask) else 0
        
        total_energy = low_energy + mid_energy + high_energy
        
        if total_energy < 1e-8:
            return "—Ç–∏—à–∏–Ω–∞", "üîá", 0.0
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        low_ratio = low_energy / total_energy
        mid_ratio = mid_energy / total_energy
        high_ratio = high_energy / total_energy
        
        # –ü–∏–∫–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞
        peak_freq_idx = np.argmax(magnitude)
        peak_frequency = freqs[peak_freq_idx] if peak_freq_idx < len(freqs) else 0
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–≤—É–∫–∞
        if mid_ratio > 0.6 and 300 <= peak_frequency <= 3000:
            return "—Ä–µ—á—å/–≥–æ–ª–æ—Å", "üó£Ô∏è", total_energy
        elif low_ratio > 0.5 and total_energy > self.adaptive_energy_threshold * 3:
            return "—É–¥–∞—Ä/–±–∞—Å—ã", "ü•Å", total_energy
        elif high_ratio > 0.4 and peak_frequency > 2000:
            return "—Ä–µ–∑–∫–∏–π/–≤—ã—Å–æ–∫–∏–π", "‚ö°", total_energy
        elif mid_ratio > 0.4 and high_ratio > 0.2:
            return "–º—É–∑—ã–∫–∞/–º–µ–ª–æ–¥–∏—è", "üéµ", total_energy
        elif low_ratio > 0.6 and peak_frequency < 200:
            return "–≥—É–ª/–Ω–∏–∑–∫–∏–π —Ç–æ–Ω", "üåä", total_energy
        elif total_energy > self.adaptive_energy_threshold * 5:
            return "–≥—Ä–æ–º–∫–∏–π –∑–≤—É–∫", "üì¢", total_energy
        else:
            return "—Å–º–µ—à–∞–Ω–Ω—ã–π –∑–≤—É–∫", "üîä", total_energy
    
    def detect_sound_pattern(self, audio_data):
        """–î–µ—Ç–µ–∫—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∑–≤—É–∫–∞"""
        volume = np.abs(audio_data).mean()
        energy = np.sqrt(np.mean(audio_data**2))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        self.volume_history.append(volume)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        volume_check = volume > self.adaptive_volume_threshold
        energy_check = energy > self.adaptive_energy_threshold
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∏–∫
        if len(self.volume_history) >= 5:
            recent_avg = np.mean(list(self.volume_history)[-5:])
            volume_spike = volume > recent_avg * 2.0
        else:
            volume_spike = volume > self.background_volume * 5
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        current_time = time.time()
        time_check = (current_time - self.last_detection_time) > self.min_interval
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        is_significant = (volume_check and energy_check) or volume_spike
        
        return is_significant and time_check, volume, energy
    
    def format_distance(self, distance):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è"""
        if distance < 1.0:
            return f"{distance*100:.0f}—Å–º"
        elif distance < 10.0:
            return f"{distance:.1f}–º"
        else:
            return f"{distance:.0f}–º"
    
    def get_distance_icon(self, distance):
        """–ò–∫–æ–Ω–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è"""
        if distance < 0.5:
            return "üî•"
        elif distance < 1.5:
            return "üìç"
        elif distance < 3.0:
            return "üìå"
        elif distance < 5.0:
            return "üì°"
        else:
            return "üå´Ô∏è"
    
    def create_visual_indicators(self, volume, energy, distance):
        """–í–∏–∑—É–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã"""
        # –ì—Ä–æ–º–∫–æ—Å—Ç—å
        vol_bar_len = 25
        vol_filled = int((min(volume, 0.1) / 0.1) * vol_bar_len)
        vol_bar = f"üîä |{'‚ñà' * vol_filled}{'‚ñë' * (vol_bar_len - vol_filled)}| {volume:.4f}"
        
        # –≠–Ω–µ—Ä–≥–∏—è
        energy_bar_len = 25
        energy_filled = int((min(energy, 0.1) / 0.1) * energy_bar_len)
        energy_bar = f"‚ö° |{'‚ñà' * energy_filled}{'‚ñë' * (energy_bar_len - energy_filled)}| {energy:.4f}"
        
        # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        dist_bar_len = 30
        dist_pos = int((min(distance, 10) / 10) * dist_bar_len)
        dist_bar = f"üìè |{'‚ñë' * dist_pos}‚óè{'‚ñë' * (dist_bar_len - dist_pos)}| {self.format_distance(distance)}"
        
        return vol_bar, energy_bar, dist_bar
    
    def display_detection(self, volume, energy, db_level, distance, description, 
                         sound_type, sound_icon, frequency_energy):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–µ–∫—Ü–∏–∏"""
        self.detections_count += 1
        current_time = datetime.now().strftime("%H:%M:%S")
        distance_icon = self.get_distance_icon(distance)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        vol_bar, energy_bar, dist_bar = self.create_visual_indicators(volume, energy, distance)
        
        print("\n")
        print(f"üîî === –ó–í–£–ö #{self.detections_count} –û–ë–ù–ê–†–£–ñ–ï–ù === {current_time}")
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        print(vol_bar)
        print(energy_bar)
        print(dist_bar)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–≤—É–∫–µ
        print(f"\n{sound_icon} –¢–∏–ø –∑–≤—É–∫–∞:     {sound_type.upper()}")
        print(f"üìä –ì—Ä–æ–º–∫–æ—Å—Ç—å:     {volume:.4f} (–ø–æ—Ä–æ–≥: {self.adaptive_volume_threshold:.4f})")
        print(f"‚ö° –≠–Ω–µ—Ä–≥–∏—è:       {energy:.4f} (–ø–æ—Ä–æ–≥: {self.adaptive_energy_threshold:.4f})")
        print(f"üéµ –ß–∞—Å—Ç–æ—Ç–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è: {frequency_energy:.6f}")
        print(f"üì¢ –î–µ—Ü–∏–±–µ–ª—ã:      {db_level:.1f} –¥–ë")
        print(f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:    {distance_icon} {self.format_distance(distance)}")
        print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:      {description}")
        print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:    {self.detections_count} –¥–µ—Ç–µ–∫—Ü–∏–π –∑–∞ —Å–µ—Å—Å–∏—é")
        
        # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ñ–æ–Ω—É
        volume_ratio = volume / self.background_volume
        print(f"üì∂ –£—Å–∏–ª–µ–Ω–∏–µ –Ω–∞–¥ —Ñ–æ–Ω–æ–º: {volume_ratio:.1f}x")
        
        print("=" * 60)
    
    def show_activity_dot(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
        print(".", end="", flush=True)
    
    def audio_callback(self, indata, frames, time, status):
        """Callback –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ"""
        if status:
            print(f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å: {status}")
        
        audio_data = indata[:, 0].copy()
        self.frames_processed += 1
        
        try:
            # –î–µ—Ç–µ–∫—Ü–∏—è –∑–≤—É–∫–∞
            is_sound, volume, energy = self.detect_sound_pattern(audio_data)
            
            if is_sound:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–µ—Ç–µ–∫—Ü–∏–∏
                self.last_detection_time = time.time()
                
                # –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç
                sound_type, sound_icon, freq_energy = self.analyze_frequency_content(audio_data)
                
                # –†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                db_level = self.calculate_decibels(audio_data)
                distance, description = self.interpolate_distance(db_level)
                
                # –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
                self.db_buffer.append(db_level)
                self.distance_buffer.append(distance)
                
                if len(self.db_buffer) >= 3:
                    smoothed_db = np.mean(list(self.db_buffer))
                    smoothed_distance = np.median(list(self.distance_buffer))
                else:
                    smoothed_db = db_level
                    smoothed_distance = distance
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                self.display_detection(
                    volume, energy, smoothed_db, smoothed_distance, description,
                    sound_type, sound_icon, freq_energy
                )
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∂–¥—ã–µ 50 –∫–∞–¥—Ä–æ–≤
                if self.frames_processed % 50 == 0:
                    self.show_activity_dot()
                    
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
    
    def list_audio_devices(self):
        """–°–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        print("üé§ –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
        devices = sd.query_devices()
        for i, device in enumerate(devices):
            if device['max_input_channels'] > 0:
                print(f"   {i}: {device['name']} ‚úÖ")
    
    def start_detection(self):
        """–ó–∞–ø—É—Å–∫ –¥–µ—Ç–µ–∫—Ü–∏–∏"""
        print("\nüéØ === –ü–ê–†–ê–ú–ï–¢–†–´ –ü–†–û–°–¢–û–ì–û –î–ï–¢–ï–ö–¢–û–†–ê ===")
        print(f"   üìä –ß–∞—Å—Ç–æ—Ç–∞: {self.SAMPLE_RATE} –ì—Ü")
        print(f"   üîä –ü–æ—Ä–æ–≥ –≥—Ä–æ–º–∫–æ—Å—Ç–∏: {self.adaptive_volume_threshold:.6f}")
        print(f"   ‚ö° –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥: {self.adaptive_energy_threshold:.6f}")
        print(f"   ‚è±Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.min_interval}—Å")
        print(f"   üéØ –¶–µ–ª—å: –õ–Æ–ë–´–ï –ó–ù–ê–ß–ò–ú–´–ï –ó–í–£–ö–ò")
        print("=" * 50)
        
        self.list_audio_devices()
        
        print(f"\nüéµ –ü—Ä–æ—Å—Ç–æ–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –≥–æ—Ç–æ–≤!")
        print(f"üîä –ò–∑–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –∑–≤—É–∫–∏ - –≥–æ–ª–æ—Å, –º—É–∑—ã–∫—É, —Å—Ç—É–∫–∏...")
        print(f"‚úÖ –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –∫ —Ñ–æ–Ω–æ–≤–æ–º—É —à—É–º—É: {self.background_volume:.6f}")
        print(f"‚è±Ô∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ", end="", flush=True)
        
        self.running = True
        
        try:
            with sd.InputStream(
                samplerate=self.SAMPLE_RATE,
                channels=1,
                callback=self.audio_callback,
                blocksize=self.CHUNK_SIZE,
                dtype=np.float32
            ):
                while self.running:
                    time.sleep(0.1)
                    
        except KeyboardInterrupt:
            print(f"\n\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
            print(f"üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–≤—É–∫–æ–≤: {self.detections_count}")
            print(f"üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–¥—Ä–æ–≤: {self.frames_processed}")
            if self.frames_processed > 0:
                print(f"üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {(self.detections_count/self.frames_processed*100):.2f}%")
            self.running = False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")

def main():
    try:
        detector = SimpleUniversalSoundDetector()
        detector.start_detection()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()