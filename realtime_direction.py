import tensorflow as tf
import tensorflow_hub as hub
import numpy as np
import sounddevice as sd
import time
from collections import deque
import threading
import sys
import math

# –ü—É—Ç–∏
MODEL_PATH = "model/my_sound_model.h5"
yamnet_model = hub.load("https://tfhub.dev/google/yamnet/1")
classifier = tf.keras.models.load_model(MODEL_PATH)
class_names = ["negative", "positive"]

SAMPLE_RATE = 16000
BLOCK_DURATION = 1.0
BLOCK_SIZE = int(SAMPLE_RATE * BLOCK_DURATION)
MIN_CONFIDENCE = 0.8
SMOOTH_WINDOW = 3
RMS_THRESHOLD = 0.01
CHANNELS = 2  # –°—Ç–µ—Ä–µ–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
SPEED_OF_SOUND = 343.0  # –º/—Å –ø—Ä–∏ 20¬∞C
MIC_DISTANCE = 0.1      # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞–º–∏ –≤ –º–µ—Ç—Ä–∞—Ö (10 —Å–º)

# –ë—É—Ñ–µ—Ä—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
prediction_buffer = deque(maxlen=SMOOTH_WINDOW)
volume_buffer_left = deque(maxlen=20)
volume_buffer_right = deque(maxlen=20)
direction_buffer = deque(maxlen=10)
last_prediction = None
last_time = 0
is_running = True

def extract_embedding_from_audio(audio):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥ –∏–∑ –º–æ–Ω–æ –∞—É–¥–∏–æ –¥–ª—è YAMNet"""
    scores, embeddings, spectrogram = yamnet_model(audio)
    embedding = tf.reduce_mean(embeddings, axis=0)
    return embedding

def smooth_predictions(new_prediction):
    """–°–≥–ª–∞–∂–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
    prediction_buffer.append(new_prediction)
    if len(prediction_buffer) < SMOOTH_WINDOW:
        return None
    
    negative_count = sum(1 for p in prediction_buffer if p == 0)
    positive_count = sum(1 for p in prediction_buffer if p == 1)
    return 0 if negative_count >= positive_count else 1

def calculate_direction(left_channel, right_channel):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—É–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏—Ö–æ–¥–∞ (TDOA)
    """
    try:
        # –ù–∞—Ö–æ–¥–∏–º –≤–∑–∞–∏–º–Ω—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏
        correlation = np.correlate(left_channel, right_channel, mode='full')
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–∏–∫ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        max_corr_idx = np.argmax(correlation)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ —Å–µ–º–ø–ª–∞—Ö
        delay_samples = max_corr_idx - len(right_channel) + 1
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∑–∞–¥–µ—Ä–∂–∫—É –≤—Ä–µ–º–µ–Ω–∏
        delay_time = delay_samples / SAMPLE_RATE
        
        # –í—ã—á–∏—Å–ª—è–µ–º —É–≥–æ–ª (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–∏)
        if abs(delay_time) > 0:
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –Ω–∞—à–µ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞–º–∏
            max_delay = MIC_DISTANCE / SPEED_OF_SOUND
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
            normalized_delay = np.clip(delay_time / max_delay, -1, 1)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —É–≥–æ–ª –≤ –≥—Ä–∞–¥—É—Å–∞—Ö (-90¬∞ –¥–æ +90¬∞)
            angle_rad = math.asin(normalized_delay)
            angle_deg = math.degrees(angle_rad)
            
            return angle_deg, delay_time
        else:
            return 0.0, 0.0
            
    except Exception as e:
        return 0.0, 0.0

def get_direction_description(angle):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —É–≥–æ–ª –≤ –ø–æ–Ω—è—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    if abs(angle) < 10:
        return "üìç –¶–ï–ù–¢–†", "üéØ"
    elif angle > 60:
        return "üëà –õ–ï–í–´–ô", "‚¨ÖÔ∏è"
    elif angle > 30:
        return "‚ÜñÔ∏è –õ–ï–í–û-–¶–ï–ù–¢–†", "‚ÜñÔ∏è"
    elif angle > 10:
        return "‚ÜôÔ∏è –õ–ï–í–ï–ï", "‚ÜôÔ∏è"
    elif angle < -60:
        return "üëâ –ü–†–ê–í–´–ô", "‚û°Ô∏è"
    elif angle < -30:
        return "‚ÜóÔ∏è –ü–†–ê–í–û-–¶–ï–ù–¢–†", "‚ÜóÔ∏è"
    elif angle < -10:
        return "‚ÜòÔ∏è –ü–†–ê–í–ï–ï", "‚ÜòÔ∏è"
    else:
        return "üìç –¶–ï–ù–¢–†", "üéØ"

def create_direction_visualizer(angle, max_width=30):
    """–°–æ–∑–¥–∞–µ—Ç ASCII –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–∞"""
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —É–≥–æ–ª –æ—Ç -90 –¥–æ +90 –≤ –ø–æ–∑–∏—Ü–∏—é –æ—Ç 0 –¥–æ max_width
    normalized_pos = ((angle + 90) / 180) * max_width
    pos = int(np.clip(normalized_pos, 0, max_width - 1))
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    bar = list("‚ñë" * max_width)
    bar[pos] = "üîä"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫–∏
    left_mark = "L"
    center_mark = "C"
    right_mark = "R"
    
    bar[0] = left_mark
    bar[max_width // 2] = center_mark
    bar[max_width - 1] = right_mark
    
    return "".join(bar)

def create_stereo_volume_meter(left_vol, right_vol, width=20):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–µ—Ä–µ–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≥—Ä–æ–º–∫–æ—Å—Ç–∏"""
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    left_norm = min(1.0, np.log10(left_vol * 1000 + 1) / 3) if left_vol > 0 else 0
    right_norm = min(1.0, np.log10(right_vol * 1000 + 1) / 3) if right_vol > 0 else 0
    
    left_filled = int(left_norm * width)
    right_filled = int(right_norm * width)
    
    left_bar = "‚ñà" * left_filled + "‚ñë" * (width - left_filled)
    right_bar = "‚ñà" * right_filled + "‚ñë" * (width - right_filled)
    
    # –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞
    balance = left_vol - right_vol
    if abs(balance) < 0.005:
        balance_indicator = "‚öñÔ∏è –ë–ê–õ–ê–ù–°"
    elif balance > 0:
        balance_indicator = "‚¨ÖÔ∏è –õ–ï–í–ï–ï"
    else:
        balance_indicator = "‚û°Ô∏è –ü–†–ê–í–ï–ï"
    
    return f"L |{left_bar}| {left_vol:.3f}\nR |{right_bar}| {right_vol:.3f}\n{balance_indicator}"

def display_direction_stats():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    while is_running:
        if direction_buffer and len(direction_buffer) >= 3:
            recent_angles = list(direction_buffer)[-5:]
            avg_angle = np.mean(recent_angles)
            
            direction_desc, emoji = get_direction_description(avg_angle)
            direction_viz = create_direction_visualizer(avg_angle)
            
            print(f"\nüß≠ === –ê–ù–ê–õ–ò–ó –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø ===")
            print(f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction_desc}")
            print(f"   –£–≥–æ–ª: {avg_angle:.1f}¬∞")
            print(f"   –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: {direction_viz}")
            print(f"   {emoji} –ò—Å—Ç–æ—á–Ω–∏–∫ –∑–≤—É–∫–∞")
            print("=" * 50)
            
            for _ in range(5):
                print()
        
        time.sleep(4)

def check_audio_devices():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    devices = sd.query_devices()
    print("üé§ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
    for i, device in enumerate(devices):
        if device['max_input_channels'] >= 2:
            print(f"   {i}: {device['name']} (–°—Ç–µ—Ä–µ–æ: ‚úÖ)")
        else:
            print(f"   {i}: {device['name']} (–°—Ç–µ—Ä–µ–æ: ‚ùå)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    default_device = sd.default.device[0]
    if default_device is not None:
        device_info = sd.query_devices(default_device)
        if device_info['max_input_channels'] >= 2:
            print(f"\n‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç–µ—Ä–µ–æ")
            return True
        else:
            print(f"\n‚ö†Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç–µ—Ä–µ–æ")
            return False
    return False

def volume_display_thread():
    """–ü–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    while is_running:
        if volume_buffer_left and volume_buffer_right:
            left_vol = volume_buffer_left[-1]
            right_vol = volume_buffer_right[-1]
            
            # –°—Ç–µ—Ä–µ–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≥—Ä–æ–º–∫–æ—Å—Ç–∏
            stereo_meter = create_stereo_volume_meter(left_vol, right_vol)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if direction_buffer:
                angle = direction_buffer[-1]
                direction_desc, emoji = get_direction_description(angle)
                direction_viz = create_direction_visualizer(angle)
                
                # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥
                sys.stdout.write(f"\rüîä {stereo_meter}")
                if len(direction_buffer) >= 3:
                    sys.stdout.write(f"\nüß≠ {direction_desc} ({angle:.1f}¬∞) {direction_viz}")
                sys.stdout.flush()
            
        time.sleep(0.2)

def audio_callback(indata, frames, time_info, status):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–µ—Ä–µ–æ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞"""
    global last_prediction, last_time
    
    if status:
        print(f"\n‚ö†Ô∏è Audio status: {status}")
    
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –ª–µ–≤—ã–π –∏ –ø—Ä–∞–≤—ã–π –∫–∞–Ω–∞–ª—ã
        if indata.shape[1] >= 2:
            left_channel = indata[:, 0].astype(np.float32)
            right_channel = indata[:, 1].astype(np.float32)
        else:
            # –ï—Å–ª–∏ –º–æ–Ω–æ, –¥—É–±–ª–∏—Ä—É–µ–º
            mono = indata[:, 0].astype(np.float32)
            left_channel = right_channel = mono
        
        # –í—ã—á–∏—Å–ª—è–µ–º RMS –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        left_rms = np.sqrt(np.mean(left_channel**2))
        right_rms = np.sqrt(np.mean(right_channel**2))
        avg_rms = (left_rms + right_rms) / 2
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä—ã
        volume_buffer_left.append(left_rms)
        volume_buffer_right.append(right_rms)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—É–∫–∞
        if avg_rms > RMS_THRESHOLD:
            angle, delay = calculate_direction(left_channel, right_channel)
            direction_buffer.append(angle)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥ —à—É–º–∞
        if avg_rms < RMS_THRESHOLD:
            return
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–Ω–æ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (YAMNet —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –º–æ–Ω–æ)
        mono_audio = (left_channel + right_channel) / 2
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–≤—É–∫–∞
        emb = extract_embedding_from_audio(mono_audio)
        pred = classifier.predict(np.expand_dims(emb, axis=0), verbose=0)[0]
        label_idx = np.argmax(pred)
        confidence = pred[label_idx]
        
        smoothed_prediction = smooth_predictions(label_idx)
        
        current_time = time.time()
        if (smoothed_prediction is not None and 
            confidence > MIN_CONFIDENCE and 
            smoothed_prediction != last_prediction and
            current_time - last_time > 1.5):
            
            label = class_names[smoothed_prediction]
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
            if direction_buffer:
                current_angle = direction_buffer[-1]
                direction_desc, emoji = get_direction_description(current_angle)
            else:
                current_angle = 0
                direction_desc, emoji = "üìç –ù–ï–ò–ó–í–ï–°–¢–ù–û", "‚ùì"
            
            # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            sys.stdout.write("\r" + " " * 100 + "\r")
            
            # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
            result_emoji = "üî¥" if label == "negative" else "üü¢"
            print(f"\n{result_emoji} === –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï === {result_emoji}")
            print(f"üéß –ö–ª–∞—Å—Å:       {label.upper()}")
            print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f} ({confidence*100:.1f}%)")
            print(f"üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å:   L:{left_rms:.3f} R:{right_rms:.3f}")
            print(f"üß≠ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction_desc} ({current_angle:.1f}¬∞)")
            print(f"{emoji} –ò—Å—Ç–æ—á–Ω–∏–∫ –∑–≤—É–∫–∞")
            print(f"‚è∞ –í—Ä–µ–º—è:       {time.strftime('%H:%M:%S')}")
            print("=" * 50)
            
            last_prediction = smoothed_prediction
            last_time = current_time
            
    except Exception as e:
        print(f"\n‚ùå Error in audio callback: {e}")

def main():
    print("üéôÔ∏è === REAL-TIME –î–ï–¢–ï–ö–¢–û–† –° –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï–ú –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø ===")
    print("üß≠ –ê–Ω–∞–ª–∏–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç–µ—Ä–µ–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    if not check_audio_devices():
        print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω—É–∂–µ–Ω —Å—Ç–µ—Ä–µ–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω!")
        print("üí° –î–µ—Ç–µ–∫—Ç–æ—Ä –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –Ω–µ –±—É–¥–µ—Ç.")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    print(f"\nüìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {MIN_CONFIDENCE}")
    print(f"   –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ: {SMOOTH_WINDOW} –∫–∞–¥—Ä–æ–≤")
    print(f"   –ü–æ—Ä–æ–≥ —à—É–º–∞: {RMS_THRESHOLD}")
    print(f"   –ö–∞–Ω–∞–ª—ã: {CHANNELS} (—Å—Ç–µ—Ä–µ–æ)")
    print(f"   –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞–º–∏: {MIC_DISTANCE*100} —Å–º")
    print("=" * 60)
    print("üéØ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –ì–æ–≤–æ—Ä–∏—Ç–µ –∏–ª–∏ –∏–∑–¥–∞–≤–∞–π—Ç–µ –∑–≤—É–∫–∏...")
    print("(Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)\n")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏
    volume_thread = threading.Thread(target=volume_display_thread, daemon=True)
    volume_thread.start()
    
    direction_thread = threading.Thread(target=display_direction_stats, daemon=True)
    direction_thread.start()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫
    try:
        with sd.InputStream(channels=CHANNELS, samplerate=SAMPLE_RATE, 
                          callback=audio_callback, blocksize=BLOCK_SIZE):
            try:
                while True:
                    time.sleep(0.1)
            except KeyboardInterrupt:
                global is_running
                is_running = False
                sys.stdout.write("\r" + " " * 100 + "\r")
                print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞...")
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç–µ—Ä–µ–æ –∑–∞–ø–∏—Å—å")

if __name__ == "__main__":
    main()